/* ever nesiting level (child or parent) have a reason to exist, and if you wounder if there is any nesting in the html structure that might seem to be useless, it is to maintain `transform`, prevent its overriding and avoind repeating its functions!  */
:root {
    --net-slope: 70deg;
    --stand-slope: -90deg;
    /* `--object-od` means object Orbit Duration */
    --earth-od: 10000ms; /* 10s */
    --moon-od: 1000ms; /* 1s */
}
body,
html {
    height: 100%;
    overflow: hidden !important;
}
body {
    background-image: url(../imgs/bg.png);
}
html,
body,
body > * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    text-decoration: none;
    border: none;
    outline: none;
    color: inherit;
}
main {
    height: 100%;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}
.net,
.object-box,
.sub-object,
.orbitor,
.orbited,
.stand {
    /* preserving 3D mode over layers */
    transform-style: preserve-3d;
}
.net {
    /* the virtual net that caries the objects */
    position: relative;
    transform: rotateX(var(--net-slope));
}
.object-box {
    /* centerlizing every object */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
.sub-object {
    /* to apply only the orbitting of hte sub-object (moon) //reverting the orbiting of the parent */
    animation: orbit var(--od) linear infinite reverse;
}
.orbit {
    /* drawing orbits */
    border-radius: 50%;
    border: solid #4e5961 2px;
}
.orbitor {
    /* rotating what is inside `.orbit`*/
    width: 100%;
    height: 100%;
    animation: orbit var(--od) linear infinite;
    display: flex;
    align-items: center;
}
.orbited {
    /* making the orbit line in the middle of the object */
    transform: translateX(-50%);
}
.stand {
    /* standing the object up  */
    transform: rotateX(var(--stand-slope));
    height: min-content;
}
.object {
    border-radius: 50%;
    .orbited & {
        /* keep the object facing while orbitting */
        animation: facing var(--od) linear infinite;
        /* animation-name: facing;
        animation-timing-function: linear;
        animation-iteration-count: infinite; */
    }
}
/*  */
/* objects */
/*  */
#sun {
    width: 10em;
    height: 10em;
    background-color: gold;
}
/* earth */
.earth.orbit {
    --od: var(--earth-od);
    width: 30em;
    height: 30em;
}
#earth {
    width: 5em;
    height: 5em;
    background-color: blue;
}

.moon.orbit {
    --od: var(--moon-od);
    width: 10em;
    height: 10em;
}
#moon {
    width: 1em;
    height: 1em;
    background-color: grey;
}

/* animation */
@keyframes orbit {
    /* rotate around */
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
@keyframes facing {
    /*object stay facing while orbitting */
    0% {
        transform: rotateY(0deg);
    }
    100% {
        transform: rotateY(360deg);
    }
}

.earth > .orbitor {
    background-color: #f00;
}
.moon > .orbitor {
    background-color: #0f0;
}
.moon {
    left: 0;
}
